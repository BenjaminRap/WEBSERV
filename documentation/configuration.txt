#nginx ex :
# Définit un serveur HTTP principal
server {
    # Hôte et port sur lesquels ce serveur écoute
    listen 192.168.1.1:80;              # Listen on IPv4 address
    listen [2001:0db8:85a3:0000:0000:8a2e:0370:7334]:80;  # Listen on IPv6 address
    listen unix:/var/run/nginx.sock;    # Listen on Unix socket

    root	/unitTest/;
    # Définit les noms de domaine gérés par ce serveur
    server_name www.example.com example.com;

    # Limite la taille du corps des requêtes
    client_max_body_size 5000000;

    # Configuration des pages d'erreur par défaut
    error_page 404 /custom_404.html ;
    error_page 500 502 503 504 /custom_50x.html;

    location /custom_404.html {
        root /var/www/error_pages;
        #internal;
    }

    location /custom_50x.html {
        root /var/www/error_pages;
        #internal;
    }

    # Exemple de route avec restrictions sur les méthodes HTTP
    location /api {
        request_method GET POST;

        root /var/www/api;
        index index.html;
    }

    # Redirection HTTP
    location /redirect-me {
        return 301 https://new-destination.example.com;
    }

    # Gestion de la recherche dans un répertoire
    location /kapouet {
        root /tmp/www;  # Racine des fichiers
        autoindex on;   # Active le listing des répertoires
        index index.html;
    }

    # Désactive le listing pour cette route
    location /no-listing {
        root /var/www/no-listing;
        autoindex off;
        index index.html;
    }

    # Exécution de CGI pour les fichiers avec une extension spécifique
  #  location ~ \.php$ {
  #      # Utilise FastCGI pour exécuter le CGI
  #      include fastcgi_params;
  #      fastcgi_pass php-fpm:9000;  # Exemple avec PHP-FPM
  #      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
  #      fastcgi_param PATH_INFO $fastcgi_path_info;
  #  }

    # Autoriser les uploads de fichiers
    location /upload {
		uploads on;
        root /var/www/uploads;
    }

    # Définit un fichier par défaut pour les requêtes vers des répertoires
    location / {
        root /var/www/html;
        index index.html index.htm;
    }
}

# Un autre serveur avec une configuration par défaut différente
server {
	listen 192.168.1.1:80;
    root /www/data;

    location / {
    }

    location /images/ {
    }

   # location ~ \.(mp3|mp4) {
   #     root /www/media;
	#}
}

#explanation of all configuration :
#    host : the ip on which the server is listening : 127.0.0.1 if local, 0.0.0.0 by default and to listen to all.
#	port : default 80.Wrote on the same line as the host on the nignx configuration. We may not do that
#	server_names : to differentiate all the servers listening on the ip
#make	default error page : pages returned on an error
#	limit clien height body : self explanatory
#	routes : 
#		list of accepted http methods : other methods will be returned a forbidden error
#		http redirection : redirection to another page with a code of 3XX
#		root : the path /test will be search at root/test
#		directory listing : list the content of a directory
#		default file for directory : If directory listing is enabled, shows the content, otherwise, an error page
#		execute cgi based on file extension with POST and GET : when one of those methods ask for a file with the
#			extension, execute the script in a fork and execve.
#		make the route accept uploaded files : Create a route, accepting POST, that create a new file with the body content
#		configure where they should be saved : same thing as root in a route
#		do you wonder what cgi is : see cgi.txt
		


